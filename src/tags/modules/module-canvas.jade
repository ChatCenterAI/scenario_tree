module-canvas#canvas
  svg#canvasSvg
    line#lineForPreview
  item-pop-after-drag(id='{opts.id}')
  //item-selection

  style(scoped, type='less').
    :scope {
      background: #f8f8f8;
      flex-grow: 1;
      position: relative;
      display: block;
      overflow: scroll;
      width: 100%;
      height: 100%;
      #canvasSvg {
        pointer-events: none;
        position: relative;
        width: 100000px;
        height: 100000px;
        left: 0;
        top: 0;
        z-index: 11;
        max-width: initial;
        line {
          position: relative;
          z-index: 11;
          pointer-events: auto;
        }
        #lineForPreview {
          display: none;
        }
        .show {
          display: block !important;
        }
      }
    }

  script.

    var self = this;

    this.on('mount', function(){
      
    });
    
    riot.currentProjectId = opts.id;

    this.loadScenario = async ()=>{

      self.project = await service.db.collection("projects")
        .doc(opts.id)
        .get()
        .then(function(doc) {
          var data = doc.data()
          data.id = doc.id;
          return data;
        })
        .catch(function(error) {
          console.error("Error writing document: ", error);
        });

      var firstEventName = `first-${self.project.id}`;

      scenarioArray = self.project.scenario;
      initCanvas(firstEventName);

      $('#loading').fadeOut(400);
    }

    $('#loading').fadeIn(400);
    riot.loadScenarioTimer = setInterval(function(){
      if(session.user){
        clearInterval(riot.loadScenarioTimer);
        self.loadScenario();
      }
    }, 800);


    service.db.collection("projects").doc(opts.id)
      .onSnapshot(function(doc) {
          //console.log("Current data: ", doc.data());
      });



