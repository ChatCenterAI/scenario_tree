module-canvas#canvas
  svg#canvasSvg
    line#lineForPreview
    //line#lineForGoToPreview
  div#canvasNodes
  wrap-pop-after-drag
    item-pop-after-drag
  div#canvasOverlay

  style(scoped, type='less').
    :scope {
      background: #f8f8f8;
      flex-grow: 1;
      position: relative;
      display: block;
      overflow: scroll;
      width: 100%;
      height: 100%;
      #canvasSvg {
        pointer-events: none;
        position: relative;
        width: 100000px;
        height: 100000px;
        left: 0;
        top: 0;
        z-index: 11;
        max-width: initial;
        line {
          position: relative;
          z-index: 11;
          pointer-events: auto;
        }
        #lineForPreview {
          display: none;
        }
        #lineForGoToPreview {
          display: none;
        }
        .show {
          display: block !important;
        }
      }
      #canvasNodes {
        position: absolute;
        width: 100000px;
        height: 100000px;
        top: 0;
        left: 0;
      }
      .add-node-z {
        z-index: 13;
        item-message {
          cursor: pointer !important;
        }
        item-selection {
          cursor: pointer !important;
        }
      }
      #canvasOverlay {
        display: none;
        position: absolute;
        width: 100000px;
        height: 100000px;
        top: 0;
        left: 0;
        background: rgba(0,0,0,0.5);
        z-index: 12;
      }
    }

  script.

    var self = this;

    this.on('mount', function(){
      
    });
    
    riot.currentProjectId = opts.id;

    this.loadScenario = async ()=>{

      self.project = await service.db.collection("projects")
        .doc(opts.id)
        .get()
        .then(function(doc) {
          var data = doc.data()
          data.id = doc.id;
          return data;
        })
        .catch(function(error) {
          console.error("Error writing document: ", error);
        });

      var firstEventName = `first-${self.project.id}`;

      riot.currentProject = self.project;

      var scenario = await service.db.collection("projects")
        .doc(opts.id)
        .collection('scenario')
        .get()
        .then(function(doc) {
          var resultScenario = [];     
          for(var i=0; i<doc.docs.length; i++){
            //var data = doc.docs[i].data();
            resultScenario.push(doc.docs[i].data());
          }
          return resultScenario;
        });

      scenarioArray = scenario;
      addHistory();

      //scenarioArray = self.project.scenario;
      loadCanvas(firstEventName, true);

      $('#loading').fadeOut(400);


    }

    $('#loading').fadeIn(400);
    riot.loadScenarioTimer = setInterval(function(){
      if(session.user){
        clearInterval(riot.loadScenarioTimer);
        self.loadScenario();

        // 初めてのユーザーだった場合チュートリアルを表示
        if(session.user.isFirstUser==undefined){
          $('util-modal').fadeIn(400);
          riot.mount('modal-window-content', 'module-modal-canvas-tutorial');
          riot.update();
        }
      }
    }, 800);


    service.db.collection("projects").doc(opts.id)
      .onSnapshot(function(doc) {
          //console.log("Current data: ", doc.data());
      });



